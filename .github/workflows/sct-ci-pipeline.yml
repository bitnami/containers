name: 'SCT CI Pipeline'

env:
  REGISTRY: ghcr.io
on:
  schedule: 
    - cron: '0 0 * * *'
  workflow_dispatch:
    # Allow manual triggering
  pull_request:
    branches: ["main"]
  push:
    branches: ["main"]    
permissions:
  contents: read
  packages: write
   
jobs:
  build-containers-we-care-about:
    runs-on: ubuntu-latest
    name: SCT Build
    strategy:
      max-parallel: 3
      matrix:
        container: ["os-shell", "postgresql", "postgres-exporter", "redis-cluster", "redis-exporter", "minio", "minio-client", "minio-object-browser"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Find Dockerfiles
        id: find-dockerfiles
        run: |
          cd "${{ github.workspace }}/bitnami/${{ matrix.container }}"
          
          # Find all Dockerfile paths recursively
          dockerfiles=$(find . -name "Dockerfile" -type f)
          
          if [ -z "$dockerfiles" ]; then
            echo "No Dockerfiles found for ${{ matrix.container }}"
            exit 1
          fi
          
          echo "Found Dockerfiles:"
          echo "$dockerfiles"
          
          # Save dockerfiles list to output for next step
          echo "dockerfiles<<EOF" >> $GITHUB_OUTPUT
          echo "$dockerfiles" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Process Dockerfiles
        id: process-dockerfiles
        run: |
          cd "${{ github.workspace }}/bitnami/${{ matrix.container }}"
          
          dockerfiles="${{ steps.find-dockerfiles.outputs.dockerfiles }}"
          
          # Process each Dockerfile and collect build info
          build_info=""
          for dockerfile in $dockerfiles; do
            dockerfile_dir=$(dirname "$dockerfile")
            echo "Processing Dockerfile: $dockerfile in directory: $dockerfile_dir"
            
            cd "${{ github.workspace }}/bitnami/${{ matrix.container }}/$dockerfile_dir"
            
            # Extract version from Dockerfile
            version=$(grep 'org.opencontainers.image.version=' Dockerfile | sed 's/.*org.opencontainers.image.version="\([^"]*\)".*/\1/')
            
            if [ -z "$version" ]; then
              echo "Warning: Could not extract version from Dockerfile, using 'latest'"
              version="latest"
            fi
            
            echo "Found version: $version"
            
            # Store build info for later steps
            if [ -n "$build_info" ]; then
              build_info="${build_info}|"
            fi
            build_info="${build_info}${dockerfile_dir}:${version}"
          done
          
          echo "build-info=$build_info" >> $GITHUB_OUTPUT
          echo "Build info collected: $build_info"

      - name: Check Existing Images
        id: check-images
        run: |
          cd "${{ github.workspace }}/bitnami/${{ matrix.container }}"
          
          build_info="${{ steps.process-dockerfiles.outputs.build-info }}"
          images_to_build=""
          
          IFS='|' read -ra BUILDS <<< "$build_info"
          for build in "${BUILDS[@]}"; do
            IFS=':' read -ra BUILD_PARTS <<< "$build"
            dockerfile_dir="${BUILD_PARTS[0]}"
            version="${BUILD_PARTS[1]}"
            
            registry_tag="${{ env.REGISTRY }}/${{ github.repository_owner }}/bitnami-${{ matrix.container }}:$version"
            echo "Checking if $registry_tag already exists..."
            
            if docker manifest inspect "$registry_tag" > /dev/null 2>&1; then
              echo "âœ… Image $registry_tag already exists in registry, skipping build"
            else
              echo "ðŸ”¨ Image $registry_tag not found, will build"
              if [ -n "$images_to_build" ]; then
                images_to_build="${images_to_build}|"
              fi
              images_to_build="${images_to_build}${dockerfile_dir}:${version}"
            fi
          done
          
          echo "images-to-build=$images_to_build" >> $GITHUB_OUTPUT
          echo "Images to build: $images_to_build"

      - name: Build Container Images
        if: steps.check-images.outputs.images-to-build != ''
        run: |
          cd "${{ github.workspace }}/bitnami/${{ matrix.container }}"
          
          images_to_build="${{ steps.check-images.outputs.images-to-build }}"
          
          IFS='|' read -ra BUILDS <<< "$images_to_build"
          for build in "${BUILDS[@]}"; do
            IFS=':' read -ra BUILD_PARTS <<< "$build"
            dockerfile_dir="${BUILD_PARTS[0]}"
            version="${BUILD_PARTS[1]}"
            
            echo "Building image for $dockerfile_dir with version $version"
            cd "${{ github.workspace }}/bitnami/${{ matrix.container }}/$dockerfile_dir"
            
            # Build the container with temporary tag
            temp_tag="temp-bitnami-${{ matrix.container }}-$(basename "$dockerfile_dir")-$(date +%s)"
            echo "Building with temporary tag: $temp_tag"
            docker build -t "$temp_tag" .
            echo "Build completed for $temp_tag"
            
            # Tag with proper version and registry tags
            final_tag="bitnami-${{ matrix.container }}:$version"
            registry_tag="${{ env.REGISTRY }}/${{ github.repository_owner }}/bitnami-${{ matrix.container }}:$version"
            
            echo "Tagging $temp_tag as $final_tag and $registry_tag"
            docker tag "$temp_tag" "$final_tag"
            docker tag "$temp_tag" "$registry_tag"
            docker rmi "$temp_tag"
            
            echo "Successfully created $final_tag and $registry_tag"
          done

      - name: Push Images to Registry
        if: steps.check-images.outputs.images-to-build != '' && github.ref == 'refs/heads/main'
        run: |
          images_to_build="${{ steps.check-images.outputs.images-to-build }}"
          
          echo "On main branch, pushing images to registry"
          
          IFS='|' read -ra BUILDS <<< "$images_to_build"
          for build in "${BUILDS[@]}"; do
            IFS=':' read -ra BUILD_PARTS <<< "$build"
            dockerfile_dir="${BUILD_PARTS[0]}"
            version="${BUILD_PARTS[1]}"
            
            registry_tag="${{ env.REGISTRY }}/${{ github.repository_owner }}/bitnami-${{ matrix.container }}:$version"
            echo "Pushing $registry_tag to registry"
            docker push "$registry_tag"
            echo "Successfully pushed $registry_tag"
          done

      - name: Skip Push (Not Main Branch)
        if: steps.check-images.outputs.images-to-build != '' && github.ref != 'refs/heads/main'
        run: |
          echo "Not on main branch (current: ${{ github.ref }}), skipping push to registry"
          echo "Images built but not pushed:"
          
          images_to_build="${{ steps.check-images.outputs.images-to-build }}"
          IFS='|' read -ra BUILDS <<< "$images_to_build"
          for build in "${BUILDS[@]}"; do
            IFS=':' read -ra BUILD_PARTS <<< "$build"
            dockerfile_dir="${BUILD_PARTS[0]}"
            version="${BUILD_PARTS[1]}"
            registry_tag="${{ env.REGISTRY }}/${{ github.repository_owner }}/bitnami-${{ matrix.container }}:$version"
            echo "  - $registry_tag"
          done